import random

dic_action = {0: [1, 1, 1, 1, 1, 1], 1: [1, 1, 1, 1, 1, 0], 2: [1, 1, 1, 1, 0, 1], 3: [1, 1, 1, 1, 0, 0], 4: [1, 1, 1, 0, 1, 1], 5: [1, 1, 1, 0, 1, 0], 6: [1, 1, 1, 0, 0, 1], 7: [1, 1, 1, 0, 0, 0], 8: [0, 0, 0, 1, 1, 1], 9: [0, 0, 0, 1, 1, 0], 10: [0, 0, 0, 1, 0, 1], 11: [0, 0, 0, 1, 0, 0], 12: [0, 0, 0, 0, 1, 1], 13: [0, 0, 0, 0, 1, 0], 14: [0, 0, 0, 0, 0, 1], 15: [0, 0, 0, 0, 0, 0], 16: [0, 0, -1, 1, 1, 1], 17: [0, 0, -1, 1, 1, 0], 18: [0, 0, -1, 1, 0, 1], 19: [0, 0, -1, 1, 0, 0], 20: [0, 0, -1, 0, 1, 1], 21: [0, 0, -1, 0, 1, 0], 22: [0, 0, -1, 0, 0, 1], 23: [0, 0, -1, 0, 0, 0], 24: [0, 0, 1, 1, 1, 1], 25: [0, 0, 1, 1, 1, 0], 26: [0, 0, 1, 1, 0, 1], 27: [0, 0, 1, 1, 0, 0], 28: [0, 0, 1, 0, 1, 1], 29: [0, 0, 1, 0, 1, 0], 30: [0, 0, 1, 0, 0, 1], 31: [0, 0, 1, 0, 0, 0], 32: [0, -1, 0, 1, 1, 1], 33: [0, -1, 0, 1, 1, 0], 34: [0, -1, 0, 1, 0, 1], 35: [0, -1, 0, 1, 0, 0], 36: [0, -1, 0, 0, 1, 1], 37: [0, -1, 0, 0, 1, 0], 38: [0, -1, 0, 0, 0, 1], 39: [0, -1, 0, 0, 0, 0], 40: [0, -1, -1, 1, 1, 1], 41: [0, -1, -1, 1, 1, 0], 42: [0, -1, -1, 1, 0, 1], 43: [0, -1, -1, 1, 0, 0], 44: [0, -1, -1, 0, 1, 1], 45: [0, -1, -1, 0, 1, 0], 46: [0, -1, -1, 0, 0, 1], 47: [0, -1, -1, 0, 0, 0], 48: [0, -1, 1, 1, 1, 1], 49: [0, -1, 1, 1, 1, 0], 50: [0, -1, 1, 1, 0, 1], 51: [0, -1, 1, 1, 0, 0], 52: [0, -1, 1, 0, 1, 1], 53: [0, -1, 1, 0, 1, 0], 54: [0, -1, 1, 0, 0, 1], 55: [0, -1, 1, 0, 0, 0], 56: [0, 1, 0, 1, 1, 1], 57: [0, 1, 0, 1, 1, 0], 58: [0, 1, 0, 1, 0, 1], 59: [0, 1, 0, 1, 0, 0], 60: [0, 1, 0, 0, 1, 1], 61: [0, 1, 0, 0, 1, 0], 62: [0, 1, 0, 0, 0, 1], 63: [0, 1, 0, 0, 0, 0], 64: [0, 1, -1, 1, 1, 1], 65: [0, 1, -1, 1, 1, 0], 66: [0, 1, -1, 1, 0, 1], 67: [0, 1, -1, 1, 0, 0], 68: [0, 1, -1, 0, 1, 1], 69: [0, 1, -1, 0, 1, 0], 70: [0, 1, -1, 0, 0, 1], 71: [0, 1, -1, 0, 0, 0], 72: [0, 1, 1, 1, 1, 1], 73: [0, 1, 1, 1, 1, 0], 74: [0, 1, 1, 1, 0, 1], 75: [0, 1, 1, 1, 0, 0], 76: [0, 1, 1, 0, 1, 1], 77: [0, 1, 1, 0, 1, 0], 78: [0, 1, 1, 0, 0, 1], 79: [0, 1, 1, 0, 0, 0], 80: [-1, 0, 0, 1, 1, 1], 81: [-1, 0, 0, 1, 1, 0], 82: [-1, 0, 0, 1, 0, 1], 83: [-1, 0, 0, 1, 0, 0], 84: [-1, 0, 0, 0, 1, 1], 85: [-1, 0, 0, 0, 1, 0], 86: [-1, 0, 0, 0, 0, 1], 87: [-1, 0, 0, 0, 0, 0], 88: [-1, 0, -1, 1, 1, 1], 89: [-1, 0, -1, 1, 1, 0], 90: [-1, 0, -1, 1, 0, 1], 91: [-1, 0, -1, 1, 0, 0], 92: [-1, 0, -1, 0, 1, 1], 93: [-1, 0, -1, 0, 1, 0], 94: [-1, 0, -1, 0, 0, 1], 95: [-1, 0, -1, 0, 0, 0], 96: [-1, 0, 1, 1, 1, 1], 97: [-1, 0, 1, 1, 1, 0], 98: [-1, 0, 1, 1, 0, 1], 99: [-1, 0, 1, 1, 0, 0], 100: [-1, 0, 1, 0, 1, 1], 101: [-1, 0, 1, 0, 1, 0], 102: [-1, 0, 1, 0, 0, 1], 103: [-1, 0, 1, 0, 0, 0], 104: [-1, -1, 0, 1, 1, 1], 105: [-1, -1, 0, 1, 1, 0], 106: [-1, -1, 0, 1, 0, 1], 107: [-1, -1, 0, 1, 0, 0], 108: [-1, -1, 0, 0, 1, 1], 109: [-1, -1, 0, 0, 1, 0], 110: [-1, -1, 0, 0, 0, 1], 111: [-1, -1, 0, 0, 0, 0], 112: [-1, -1, -1, 1, 1, 1], 113: [-1, -1, -1, 1, 1, 0], 114: [-1, -1, -1, 1, 0, 1], 115: [-1, -1, -1, 1, 0, 0], 116: [-1, -1, -1, 0, 1, 1], 117: [-1, -1, -1, 0, 1, 0], 118: [-1, -1, -1, 0, 0, 1], 119: [-1, -1, -1, 0, 0, 0], 120: [-1, -1, 1, 1, 1, 1], 121: [-1, -1, 1, 1, 1, 0], 122: [-1, -1, 1, 1, 0, 1], 123: [-1, -1, 1, 1, 0, 0], 124: [-1, -1, 1, 0, 1, 1], 125: [-1, -1, 1, 0, 1, 0], 126: [-1, -1, 1, 0, 0, 1], 127: [-1, -1, 1, 0, 0, 0], 128: [-1, 1, 0, 1, 1, 1], 129: [-1, 1, 0, 1, 1, 0], 130: [-1, 1, 0, 1, 0, 1], 131: [-1, 1, 0, 1, 0, 0], 132: [-1, 1, 0, 0, 1, 1], 133: [-1, 1, 0, 0, 1, 0], 134: [-1, 1, 0, 0, 0, 1], 135: [-1, 1, 0, 0, 0, 0], 136: [-1, 1, -1, 1, 1, 1], 137: [-1, 1, -1, 1, 1, 0], 138: [-1, 1, -1, 1, 0, 1], 139: [-1, 1, -1, 1, 0, 0], 140: [-1, 1, -1, 0, 1, 1], 141: [-1, 1, -1, 0, 1, 0], 142: [-1, 1, -1, 0, 0, 1], 143: [-1, 1, -1, 0, 0, 0], 144: [-1, 1, 1, 1, 1, 1], 145: [-1, 1, 1, 1, 1, 0], 146: [-1, 1, 1, 1, 0, 1], 147: [-1, 1, 1, 1, 0, 0], 148: [-1, 1, 1, 0, 1, 1], 149: [-1, 1, 1, 0, 1, 0], 150: [-1, 1, 1, 0, 0, 1], 151: [-1, 1, 1, 0, 0, 0], 152: [1, 0, 0, 1, 1, 1], 153: [1, 0, 0, 1, 1, 0], 154: [1, 0, 0, 1, 0, 1], 155: [1, 0, 0, 1, 0, 0], 156: [1, 0, 0, 0, 1, 1], 157: [1, 0, 0, 0, 1, 0], 158: [1, 0, 0, 0, 0, 1], 159: [1, 0, 0, 0, 0, 0], 160: [1, 0, -1, 1, 1, 1], 161: [1, 0, -1, 1, 1, 0], 162: [1, 0, -1, 1, 0, 1], 163: [1, 0, -1, 1, 0, 0], 164: [1, 0, -1, 0, 1, 1], 165: [1, 0, -1, 0, 1, 0], 166: [1, 0, -1, 0, 0, 1], 167: [1, 0, -1, 0, 0, 0], 168: [1, 0, 1, 1, 1, 1], 169: [1, 0, 1, 1, 1, 0], 170: [1, 0, 1, 1, 0, 1], 171: [1, 0, 1, 1, 0, 0], 172: [1, 0, 1, 0, 1, 1], 173: [1, 0, 1, 0, 1, 0], 174: [1, 0, 1, 0, 0, 1], 175: [1, 0, 1, 0, 0, 0], 176: [1, -1, 0, 1, 1, 1], 177: [1, -1, 0, 1, 1, 0], 178: [1, -1, 0, 1, 0, 1], 179: [1, -1, 0, 1, 0, 0], 180: [1, -1, 0, 0, 1, 1], 181: [1, -1, 0, 0, 1, 0], 182: [1, -1, 0, 0, 0, 1], 183: [1, -1, 0, 0, 0, 0], 184: [1, -1, -1, 1, 1, 1], 185: [1, -1, -1, 1, 1, 0], 186: [1, -1, -1, 1, 0, 1], 187: [1, -1, -1, 1, 0, 0], 188: [1, -1, -1, 0, 1, 1], 189: [1, -1, -1, 0, 1, 0], 190: [1, -1, -1, 0, 0, 1], 191: [1, -1, -1, 0, 0, 0], 192: [1, -1, 1, 1, 1, 1], 193: [1, -1, 1, 1, 1, 0], 194: [1, -1, 1, 1, 0, 1], 195: [1, -1, 1, 1, 0, 0], 196: [1, -1, 1, 0, 1, 1], 197: [1, -1, 1, 0, 1, 0], 198: [1, -1, 1, 0, 0, 1], 199: [1, -1, 1, 0, 0, 0], 200: [1, 1, 0, 1, 1, 1], 201: [1, 1, 0, 1, 1, 0], 202: [1, 1, 0, 1, 0, 1], 203: [1, 1, 0, 1, 0, 0], 204: [1, 1, 0, 0, 1, 1], 205: [1, 1, 0, 0, 1, 0], 206: [1, 1, 0, 0, 0, 1], 207: [1, 1, 0, 0, 0, 0], 208: [1, 1, -1, 1, 1, 1], 209: [1, 1, -1, 1, 1, 0], 210: [1, 1, -1, 1, 0, 1], 211: [1, 1, -1, 1, 0, 0], 212: [1, 1, -1, 0, 1, 1], 213: [1, 1, -1, 0, 1, 0], 214: [1, 1, -1, 0, 0, 1], 215: [1, 1, -1, 0, 0, 0]}
# Set the seed for reproducibility
random.seed(42)

# Extract keys and values
keys = list(dic_action.keys())
values = list(dic_action.values())

# Shuffle keys
random.shuffle(keys)

# Create new dictionary with shuffled keys
new_dic_action = {k: v for k, v in zip(keys, values)}
sorted_dic_action = {k: new_dic_action[k] for k in sorted(new_dic_action)}
# Print the new dictionary
print(sorted_dic_action)

second_dic={}
for i in sorted_dic_action:
    if(sorted_dic_action[i][0] == 0):
      camA_steer="DN"
    elif(sorted_dic_action[i][0] == 1):
      camA_steer="INC"
    elif(sorted_dic_action[i][0] == -1):
      camA_steer="DEC"
    
    if(sorted_dic_action[i][1] == 0):
      camB_steer="DN"
    elif(sorted_dic_action[i][1] == 1):
      camB_steer="INC"
    elif(sorted_dic_action[i][1] == -1):
      camB_steer="DEC"
    
    if(sorted_dic_action[i][2] == 0):
      camC_steer="DN"
    elif(sorted_dic_action[i][2] == 1):
      camC_steer="INC"
    elif(sorted_dic_action[i][2] == -1):
      camC_steer="DEC"

    if(sorted_dic_action[i][3] == 0):
      camA_colab="0"
    elif(sorted_dic_action[i][3] == 1):
      camA_colab="1"

    if(sorted_dic_action[i][4] == 0):
      camB_colab="0"
    elif(sorted_dic_action[i][4] == 1):
      camB_colab="1"

    if(sorted_dic_action[i][5] == 0):
      camC_colab="0"
    elif(sorted_dic_action[i][5] == 1):
      camC_colab="1"
    #print(sorted_dic_action[i])
    final_string="THETA1_{}_THETA2_{}_THETA3_{}_AB{}AC{}BC{}".format(camA_steer,camB_steer,camC_steer,camA_colab,camB_colab,camC_colab)
    second_dic[i]=final_string
    #print(final_string)
print(second_dic)
